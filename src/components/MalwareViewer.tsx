
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Bug, File, FileWarning, FileX } from 'lucide-react';
import { ScrollArea } from '@/components/ui/scroll-area';

// Mock malware data
const mockMalware = [
  {
    id: 'mal-001',
    name: 'wannacry.exe',
    type: 'Ransomware',
    size: '245 KB',
    timestamp: '2023-04-18T14:32:21',
    md5: 'e889544aff85ffaf8b0d0da705105dee',
    sha1: '5ff465afaabcbf0150d1a3ab2c2e74f3a4426467',
    severity: 'Critical',
    origin: '192.168.1.24 (Russia)',
    content: `
      MZ����������@����������������������������������������...
      0b8 jnehpqrw nqrhepbqw4pb qw4pbqw4pb qw4pbqw4 qw4pb...
      This is a dangerous file containing encryption routines...
      PK\x03\x04\x14\x00\x00\x08\x00\x00\x00 \x00\x00\x00...
      The file attempts to encrypt the following extensions:...
      .doc, .docx, .xls, .xlsx, .ppt, .pptx, .pst, .ost, .msg...
    `,
    description: 'WannaCry is a ransomware worm that spread rapidly through computer networks by exploiting vulnerabilities in Microsoft Windows. It encrypts user files and demands a ransom payment in Bitcoin cryptocurrency.',
    behaviorDetails: [
      'Attempts to exploit EternalBlue vulnerability',
      'Encrypts user files with RSA-2048 encryption',
      'Installs backdoor Trojan component',
      'Creates persistence through Windows Registry',
      'Attempts to spread laterally through SMB protocol'
    ],
    networkConnections: [
      { ip: '193.23.244.244', port: 445, protocol: 'SMB', country: 'Russia' },
      { ip: '84.32.115.123', port: 9001, protocol: 'C&C', country: 'Unknown' }
    ]
  },
  {
    id: 'mal-002',
    name: 'mirai_bot.elf',
    type: 'Botnet',
    size: '324 KB',
    timestamp: '2023-04-18T10:15:43',
    md5: 'f8b544afc285faf8b0d0da705105dee',
    sha1: '7ba465afaabcbf0150d1a3ab2c2e74f3a4426467',
    severity: 'High',
    origin: '45.23.123.12 (China)',
    content: `
      ELF>�����@�����@�����������G���G��...
      It attempts to login with default username/password combos...
      for (i = 0; i < 10; i++) {
        sockaddr.sin_family = AF_INET;
        sockaddr.sin_port = htons(23);
        sockaddr.sin_addr.s_addr = getTargetIP();
        connect(sock, (struct sockaddr *)&sockaddr, sizeof (sockaddr));
        loginSequence(sock, username[i], password[i]);
      }
      # Common username/password combinations
      admin:admin
      root:password
      user:12345
      ...
    `,
    description: 'Mirai is malware that turns computer systems running Linux into remotely controlled bots, which can be used as part of a botnet for large-scale network attacks. It primarily targets IoT devices.',
    behaviorDetails: [
      'Scans for vulnerable IoT devices',
      'Attempts login with default credentials',
      'Establishes persistence across reboots',
      'Communicates with command and control servers',
      'Can launch DDoS attacks on demand'
    ],
    networkConnections: [
      { ip: '45.23.123.12', port: 23, protocol: 'Telnet', country: 'China' },
      { ip: '104.86.227.53', port: 48101, protocol: 'C&C', country: 'China' }
    ]
  },
  {
    id: 'mal-003',
    name: 'teslacrypt.ps1',
    type: 'Ransomware',
    size: '45 KB',
    timestamp: '2023-04-17T22:05:11',
    md5: 'b23544afc885ffaf8b0d0da705105d3e',
    sha1: '9cf465afaabcbf0150d1a3ab2c2e74f3a4426467',
    severity: 'High',
    origin: '89.160.24.13 (Brazil)',
    content: `
      # PowerShell Encryption Script
      $key = "a8H2_pQ9#mZ7*L5s"
      function Encrypt-File {
          param($FilePath)
          $fileContent = Get-Content $FilePath -Raw
          $bytes = [System.Text.Encoding]::UTF8.GetBytes($fileContent)
          $aes = New-Object System.Security.Cryptography.AesManaged
          $aes.Key = [System.Text.Encoding]::UTF8.GetBytes($key)
          $aes.IV = New-Object Byte[] 16
          $encryptor = $aes.CreateEncryptor()
          $encryptedData = $encryptor.TransformFinalBlock($bytes, 0, $bytes.Length)
          $encryptedBase64 = [Convert]::ToBase64String($encryptedData)
          Set-Content -Path "$FilePath.encrypted" -Value $encryptedBase64
          Remove-Item $FilePath
      }
      # Main execution
      $targetExtensions = @(".doc", ".xls", ".pdf", ".jpg", ".mp3")
      $targetFolders = @("C:\\Users", "D:\\Data")
      # Rest of malicious code...
    `,
    description: 'TeslaCrypt is a ransomware that targets computer game files along with common document formats. It uses sophisticated encryption to lock user files and demands payment for decryption.',
    behaviorDetails: [
      'Targets game saves and profiles',
      'Uses AES encryption',
      'Creates ransom notes in each folder',
      'Removes system restore points',
      'Attempts to disable security software'
    ],
    networkConnections: [
      { ip: '89.160.24.13', port: 80, protocol: 'HTTP', country: 'Brazil' },
      { ip: '23.227.38.32', port: 443, protocol: 'HTTPS', country: 'Unknown' }
    ]
  }
];

const MalwareViewer = () => {
  const [selectedMalware, setSelectedMalware] = useState(mockMalware[0]);
  const [activeTab, setActiveTab] = useState('details');

  const getFileIcon = (type: string) => {
    switch (type) {
      case 'Ransomware':
        return <FileX className="h-5 w-5 text-cyber-danger" />;
      case 'Botnet':
        return <FileWarning className="h-5 w-5 text-cyber-warning" />;
      default:
        return <File className="h-5 w-5 text-cyber-accent" />;
    }
  };

  return (
    <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-3 gap-4">
      <Card className="cyber-card md:col-span-1">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Bug className="mr-2 h-5 w-5 text-cyber-accent" />
            Captured Malware
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-[600px] pr-4">
            <div className="space-y-1">
              {mockMalware.map((malware) => (
                <button
                  key={malware.id}
                  className={`w-full px-3 py-2 text-left rounded-md transition-colors ${
                    selectedMalware.id === malware.id
                      ? 'bg-cyber-accent text-white'
                      : 'hover:bg-cyber-muted'
                  }`}
                  onClick={() => setSelectedMalware(malware)}
                >
                  <div className="flex items-center">
                    {getFileIcon(malware.type)}
                    <div className="ml-2">
                      <div className="font-medium truncate">{malware.name}</div>
                      <div className="text-xs opacity-70 flex justify-between">
                        <span>{malware.type}</span>
                        <span>{malware.size}</span>
                      </div>
                    </div>
                  </div>
                  <div className="mt-1 flex justify-between text-xs">
                    <span 
                      className={`px-1 rounded ${
                        malware.severity === 'Critical' 
                          ? 'bg-cyber-danger/20 text-cyber-danger' 
                          : 'bg-cyber-warning/20 text-cyber-warning'
                      }`}
                    >
                      {malware.severity}
                    </span>
                    <span className="opacity-60">
                      {new Date(malware.timestamp).toLocaleDateString()}
                    </span>
                  </div>
                </button>
              ))}
            </div>
          </ScrollArea>
        </CardContent>
      </Card>

      <Card className="cyber-card md:col-span-2">
        <CardHeader>
          <CardTitle className="flex items-center">
            {getFileIcon(selectedMalware.type)}
            <span className="ml-2">{selectedMalware.name}</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="details" value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="mb-4 bg-cyber-muted border border-cyber-border">
              <TabsTrigger value="details">Details</TabsTrigger>
              <TabsTrigger value="analysis">Behavior</TabsTrigger>
              <TabsTrigger value="code">Raw Content</TabsTrigger>
              <TabsTrigger value="network">Network</TabsTrigger>
            </TabsList>
            
            <TabsContent value="details" className="animate-fade-in">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div className="space-y-2">
                  <div>
                    <span className="text-sm text-cyber-foreground/70">File Type:</span>
                    <span className="ml-2">{selectedMalware.type}</span>
                  </div>
                  <div>
                    <span className="text-sm text-cyber-foreground/70">Size:</span>
                    <span className="ml-2">{selectedMalware.size}</span>
                  </div>
                  <div>
                    <span className="text-sm text-cyber-foreground/70">Discovery:</span>
                    <span className="ml-2">{new Date(selectedMalware.timestamp).toLocaleString()}</span>
                  </div>
                  <div>
                    <span className="text-sm text-cyber-foreground/70">Origin:</span>
                    <span className="ml-2">{selectedMalware.origin}</span>
                  </div>
                </div>
                <div className="space-y-2">
                  <div>
                    <span className="text-sm text-cyber-foreground/70">Severity:</span>
                    <span 
                      className={`ml-2 px-2 py-0.5 rounded ${
                        selectedMalware.severity === 'Critical' 
                          ? 'bg-cyber-danger/20 text-cyber-danger' 
                          : 'bg-cyber-warning/20 text-cyber-warning'
                      }`}
                    >
                      {selectedMalware.severity}
                    </span>
                  </div>
                  <div>
                    <span className="text-sm text-cyber-foreground/70">MD5:</span>
                    <span className="ml-2 font-mono text-xs">{selectedMalware.md5}</span>
                  </div>
                  <div>
                    <span className="text-sm text-cyber-foreground/70">SHA1:</span>
                    <span className="ml-2 font-mono text-xs">{selectedMalware.sha1}</span>
                  </div>
                </div>
              </div>
              
              <div className="mt-4">
                <h3 className="text-lg font-medium mb-2">Description</h3>
                <p className="text-cyber-foreground/80">{selectedMalware.description}</p>
              </div>
            </TabsContent>
            
            <TabsContent value="analysis" className="animate-fade-in">
              <div className="space-y-4">
                <h3 className="text-lg font-medium mb-2">Behavior Analysis</h3>
                <ul className="space-y-2">
                  {selectedMalware.behaviorDetails.map((behavior, index) => (
                    <li key={index} className="flex items-start">
                      <div className="h-5 w-5 mr-2 flex-shrink-0 rounded-full bg-cyber-accent/20 flex items-center justify-center text-cyber-accent">
                        {index + 1}
                      </div>
                      <span>{behavior}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </TabsContent>
            
            <TabsContent value="code" className="animate-fade-in">
              <ScrollArea className="h-[400px] w-full rounded cyber-card p-4 font-mono text-xs">
                <pre className="whitespace-pre-wrap break-all">{selectedMalware.content}</pre>
              </ScrollArea>
            </TabsContent>
            
            <TabsContent value="network" className="animate-fade-in">
              <div className="space-y-4">
                <h3 className="text-lg font-medium mb-2">Network Connections</h3>
                <div className="overflow-x-auto">
                  <table className="min-w-full cyber-card">
                    <thead>
                      <tr className="border-b border-cyber-border">
                        <th className="px-4 py-2 text-left">IP Address</th>
                        <th className="px-4 py-2 text-left">Port</th>
                        <th className="px-4 py-2 text-left">Protocol</th>
                        <th className="px-4 py-2 text-left">Country</th>
                      </tr>
                    </thead>
                    <tbody>
                      {selectedMalware.networkConnections.map((conn, index) => (
                        <tr key={index} className="border-b border-cyber-border/50">
                          <td className="px-4 py-2 font-mono">{conn.ip}</td>
                          <td className="px-4 py-2">{conn.port}</td>
                          <td className="px-4 py-2">{conn.protocol}</td>
                          <td className="px-4 py-2">{conn.country}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};

export default MalwareViewer;
